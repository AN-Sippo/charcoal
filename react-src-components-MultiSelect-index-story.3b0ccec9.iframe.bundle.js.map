{"version":3,"file":"react-src-components-MultiSelect-index-story.3b0ccec9.iframe.bundle.js","mappings":";;;;;;AA8FA;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;AAEA;;;;;;AASA;;;;AAQA;;;;;;;;;;;;;AAgBA;;;;;;;AAUA;;;;;AAoBA","sources":["webpack://charcoal-ui/./packages/react/src/components/MultiSelect/index.tsx"],"sourcesContent":["import { ChangeEvent, useCallback, useContext, forwardRef, memo } from 'react'\nimport * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport warning from 'warning'\nimport { px } from '@charcoal-ui/utils'\n\nimport { MultiSelectGroupContext } from './context'\nimport { focusVisibleFocusRingCss } from '@charcoal-ui/styled'\n\nexport type MultiSelectProps = React.PropsWithChildren<{\n  value: string\n  disabled?: boolean\n  variant?: 'default' | 'overlay'\n  className?: string\n  onChange?: (payload: { value: string; selected: boolean }) => void\n}>\n\nconst MultiSelect = forwardRef<HTMLInputElement, MultiSelectProps>(\n  function MultiSelectInner(\n    {\n      value,\n      disabled = false,\n      onChange,\n      variant = 'default',\n      className,\n      children,\n    },\n    ref\n  ) {\n    const {\n      name,\n      selected,\n      disabled: parentDisabled,\n      readonly,\n      invalid,\n      onChange: parentOnChange,\n    } = useContext(MultiSelectGroupContext)\n\n    warning(\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      name !== undefined,\n      `\"name\" is not Provided for <MultiSelect>. Perhaps you forgot to wrap with <MultiSelectGroup> ?`\n    )\n\n    const isSelected = selected.includes(value)\n    const isDisabled = disabled || parentDisabled || readonly\n\n    const handleChange = useCallback(\n      (event: ChangeEvent<HTMLInputElement>) => {\n        if (!(event.currentTarget instanceof HTMLInputElement)) {\n          return\n        }\n        if (onChange) onChange({ value, selected: event.currentTarget.checked })\n        parentOnChange({ value, selected: event.currentTarget.checked })\n      },\n      [onChange, parentOnChange, value]\n    )\n\n    return (\n      <MultiSelectRoot aria-disabled={isDisabled} className={className}>\n        <MultiSelectInput\n          {...{\n            name,\n            value,\n            invalid,\n          }}\n          checked={isSelected}\n          disabled={isDisabled}\n          onChange={handleChange}\n          overlay={variant === 'overlay'}\n          aria-invalid={invalid}\n          ref={ref}\n        />\n        <MultiSelectInputOverlay\n          overlay={variant === 'overlay'}\n          invalid={invalid}\n          aria-hidden={true}\n        >\n          <pixiv-icon name=\"24/Check\" unsafe-non-guideline-scale={16 / 24} />\n        </MultiSelectInputOverlay>\n        {Boolean(children) && <MultiSelectLabel>{children}</MultiSelectLabel>}\n      </MultiSelectRoot>\n    )\n  }\n)\n\nexport default memo(MultiSelect)\n\nconst MultiSelectRoot = styled.label`\n  display: grid;\n  grid-template-columns: auto 1fr;\n  align-items: center;\n  position: relative;\n  cursor: pointer;\n  gap: ${({ theme }) => px(theme.spacing[4])};\n  &:disabled,\n  &[aria-disabled]:not([aria-disabled='false']) {\n    opacity: 0.32;\n    cursor: default;\n  }\n`\n\nconst MultiSelectLabel = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  line-height: 22px;\n  display: flow-root;\n  color: var(--charcoal-text2);\n\n  &::before {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-top: -4px;\n  }\n  &::after {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-bottom: -4px;\n  }\n`\n\nconst MultiSelectInput = styled.input.attrs({ type: 'checkbox' })<{\n  invalid: boolean\n  overlay: boolean\n}>`\n  &[type='checkbox'] {\n    appearance: none;\n    display: block;\n    width: 20px;\n    height: 20px;\n    margin: 0;\n    background-color: var(--charcoal-text3);\n    border-radius: 999999px;\n    transition: 0.2s background-color, 0.2s box-shadow;\n\n    &:checked {\n      background-color: var(--charcoal-brand);\n      &:hover {\n        &:not(:disabled):not([aria-disabled]),\n        &[aria-disabled='false'] {\n          background-color: var(--charcoal-brand-hover);\n        }\n      }\n\n      &:active {\n        &:not(:disabled):not([aria-disabled]),\n        &[aria-disabled='false'] {\n          background-color: var(--charcoal-brand-press);\n        }\n      }\n    }\n\n    &:hover {\n      &:not(:disabled):not([aria-disabled]),\n      &[aria-disabled='false'] {\n        background-color: var(--charcoal-text3-hover);\n      }\n    }\n\n    &:active {\n      &:not(:disabled):not([aria-disabled]),\n      &[aria-disabled='false'] {\n        background-color: var(--charcoal-text3-press);\n      }\n    }\n\n    ${focusVisibleFocusRingCss}\n\n    ${({ invalid, overlay }) =>\n      invalid &&\n      !overlay &&\n      css`\n        &:not(:disabled):not([aria-disabled]),\n        &[aria-disabled='false'] {\n          box-shadow: 0 0 0 4px rgba(255, 43, 0, 0.32);\n        }\n      `}\n    ${({ overlay }) =>\n      overlay &&\n      css`\n        background-color: var(--charcoal-surface4);\n      `}\n  }\n`\n\nconst MultiSelectInputOverlay = styled.div<{\n  overlay: boolean\n  invalid: boolean\n}>`\n  position: absolute;\n  top: -2px;\n  left: -2px;\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  border-radius: 999999px;\n  color: var(--charcoal-text5);\n  transition: 0.2s box-shadow;\n  ${({ invalid, overlay }) =>\n    invalid &&\n    overlay &&\n    css`\n      &:not(:disabled):not([aria-disabled]),\n      &[aria-disabled='false'] {\n        box-shadow: 0 0 0 4px rgba(255, 43, 0, 0.32);\n      }\n    `}\n\n  ${({ overlay }) =>\n    overlay &&\n    css`\n      border-color: var(--charcoal-text5);\n      border-width: 2px;\n      border-style: solid;\n    `}\n`\n\nexport type MultiSelectGroupProps = React.PropsWithChildren<{\n  className?: string\n  name: string\n  label: string\n  selected: string[]\n  onChange: (selected: string[]) => void\n  disabled?: boolean\n  readonly?: boolean\n  invalid?: boolean\n}>\n\nexport function MultiSelectGroup({\n  className,\n  name,\n  label,\n  selected,\n  onChange,\n  disabled = false,\n  readonly = false,\n  invalid = false,\n  children,\n}: MultiSelectGroupProps) {\n  const handleChange = useCallback(\n    (payload: { value: string; selected: boolean }) => {\n      const index = selected.indexOf(payload.value)\n\n      if (payload.selected) {\n        if (index < 0) {\n          onChange([...selected, payload.value])\n        }\n      } else {\n        if (index >= 0) {\n          onChange([...selected.slice(0, index), ...selected.slice(index + 1)])\n        }\n      }\n    },\n    [onChange, selected]\n  )\n\n  return (\n    <MultiSelectGroupContext.Provider\n      value={{\n        name,\n        selected: Array.from(new Set(selected)),\n        disabled,\n        readonly,\n        invalid,\n        onChange: handleChange,\n      }}\n    >\n      <div className={className} aria-label={label} data-testid=\"SelectGroup\">\n        {children}\n      </div>\n    </MultiSelectGroupContext.Provider>\n  )\n}\n"],"names":[],"sourceRoot":""}
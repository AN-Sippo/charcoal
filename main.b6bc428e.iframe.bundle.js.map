{"version":3,"file":"main.b6bc428e.iframe.bundle.js","mappings":";AAKA;AAUA;;AACA;AAGA;;AACA;;;AAEA;;AAIA;AAEA;AAEA;;AACA;;;AAgBA;;;;;;;;;;;ACzBA","sources":["webpack://charcoal-ui/../src/TokenInjector.tsx","webpack://charcoal-ui/../src/index.ts"],"sourcesContent":["import { createGlobalStyle, css } from 'styled-components'\nimport { CharcoalAbstractTheme } from '@charcoal-ui/theme'\nimport { defineThemeVariables, withPrefixes } from './util'\nimport { mapObject } from '@charcoal-ui/utils'\n\nconst GlobalStyle = createGlobalStyle`\n  ${<T extends Theme>({\n    themeMap,\n    background,\n  }: {\n    themeMap: ThemeMap<T>\n    background?: keyof ThemeMap<T>[string]['color']\n  }) =>\n    Object.entries(themeMap).map(([key, theme]) =>\n      key.startsWith('@media')\n        ? css`\n            ${key} {\n              :root {\n                ${background !== undefined &&\n                css`\n                  background-color: ${theme.color[background]};\n                `}\n                ${defineColorVariableCSS(theme)}\n              }\n            }\n          `\n        : css`\n            /* stylelint-disable-next-line no-duplicate-selectors */\n            ${key} {\n              ${background !== undefined &&\n              css`\n                background-color: ${theme.color[background]};\n              `}\n              ${defineColorVariableCSS(theme)}\n            }\n          `\n    )}\n`\n\nexport interface ThemeMap<T extends Theme> {\n  ':root': T\n  [mediaQuery: `@media (${string})`]: T\n  [selector: string]: T\n}\n\ntype Theme = Pick<CharcoalAbstractTheme, 'color' | 'effect' | 'border'>\n\nexport default function TokenInjector<T extends Theme>({\n  theme: themeMap,\n  background,\n}: {\n  theme: ThemeMap<T>\n  background?: keyof ThemeMap<T>[string]['color']\n}) {\n  return <GlobalStyle themeMap={themeMap} background={background} />\n}\n\nconst defineColorVariableCSS = (theme: Theme) => {\n  const borders = mapObject(theme.border, (name, { color }) => [\n    // REVIEW: もしtheme.colorにたまたまborder-〇〇で始まる色名がいたら被りうる\n    withPrefixes('border', name),\n    color,\n  ])\n\n  const colors = defineThemeVariables({ ...theme.color, ...borders })({ theme })\n\n  return toCSSVariables(colors)\n}\n\nfunction toCSSVariables(css: Record<string, string | number>) {\n  return Object.entries(css)\n    .map(([varName, value]) => variableDefinition(varName, value.toString()))\n    .join(';')\n}\n\nconst variableDefinition = (prop: string, value: string) => `${prop}: ${value}`\n","import { CSSObject, ThemedStyledInterface } from 'styled-components'\nimport { CharcoalAbstractTheme } from '@charcoal-ui/theme'\nimport { ArrayOrSingle, isPresent, noThemeProvider, wrapArray } from './util'\nimport { Internal, toCSSObjects } from './internals'\nimport createO from './builders/o'\nimport transition from './builders/transition'\nexport { default as TokenInjector } from './TokenInjector'\nexport {\n  getThemeSync,\n  themeSetter,\n  themeSelector,\n  prefersColorScheme,\n  useTheme,\n  useThemeSetter,\n  useLocalStorage,\n  useMedia,\n} from './helper'\nexport { defineThemeVariables } from './util'\nexport * from './SetThemeScript'\n\ntype Blank = null | undefined | false\n\nconst nonBlank = <T>(value: T): value is T extends Blank ? never : T =>\n  isPresent(value) && (value as unknown) !== false\n\n/**\n * `theme(o => [...])` の `theme` ユーティリティを構築する\n *\n * @param _styled - DEPRECATED: styled-components の `styled` そのものを渡すとそれを元に型推論ができる。が、型引数を渡す方が型推論が高速になりやすい\n *\n * @example\n *\n * import styled from 'styled-components'\n * const theme = createTheme(styled)\n *\n * @example\n *\n * const theme = createTheme<DefaultTheme>()\n */\nexport function createTheme<T extends CharcoalAbstractTheme>(\n  _styled?: ThemedStyledInterface<T>\n) {\n  type Builder = ReturnType<typeof createO<T>>\n\n  // ランタイムの `theme(o => [...])` のインターフェースを構築する\n  return function theme(\n    specFn: (o: Builder) => ArrayOrSingle<Internal | Blank>\n  ): ThemeProp<T> {\n    // styled-components のテンプレートに埋め込める関数\n    return function interpolate({ theme }) {\n      if (!isPresent(theme)) {\n        // テーマが入っていない場合は復旧不可能なのでエラーにする\n        throw noThemeProvider\n      }\n\n      const internals = [\n        // ユーザーが定義したルール\n        ...wrapArray(\n          /**\n           * こう書いてはいけない\n           *\n           * ❌\n           * ```ts\n           * const o = createO(theme)\n           * const declaration = spec(o)\n           * ```\n           *\n           * `o` を一時変数に入れてしまうと型 `T` の具象化が行われるので関数内に書く\n           */\n          specFn(/** o = */ createO(theme))\n        ),\n\n        // 必ず挿入される共通のルール\n        transition(theme),\n      ].filter(nonBlank)\n\n      return toCSSObjects(internals)\n    }\n  }\n}\n\nexport type ThemeProp<T> = ({\n  theme,\n}: {\n  theme: T | undefined\n}) => CSSObject | CSSObject[]\n\nexport * from './styles/focusVisibleFocusRingCss'\n"],"names":[],"sourceRoot":""}
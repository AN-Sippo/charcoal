{"version":3,"file":"react-src-components-Radio-index-story.60dd77e1.iframe.bundle.js","mappings":";;;;;;;;;;;AAyEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;;;;;;;;;;;;;;;;;;;;AAkCA;;;;AAeA","sources":["webpack://charcoal-ui/./packages/react/src/components/Radio/index.tsx"],"sourcesContent":["import { memo, forwardRef, useCallback, useContext } from 'react'\nimport * as React from 'react'\nimport styled from 'styled-components'\nimport warning from 'warning'\nimport { focusVisibleFocusRingCss } from '@charcoal-ui/styled'\n\nexport type RadioProps = React.PropsWithChildren<{\n  value: string\n  disabled?: boolean\n  className?: string\n}>\n\nconst Radio = forwardRef<HTMLInputElement, RadioProps>(function RadioInner(\n  { value, disabled = false, children, className },\n  ref\n) {\n  const {\n    name,\n    selected,\n    disabled: isParentDisabled,\n    readonly,\n    invalid,\n    onChange,\n  } = useContext(RadioGroupContext)\n\n  warning(\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    name !== undefined,\n    `\"name\" is not Provided for <Radio>. Perhaps you forgot to wrap with <RadioGroup> ?`\n  )\n\n  const isSelected = value === selected\n  const isDisabled = disabled || isParentDisabled\n  const isReadonly = readonly && !isSelected\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      onChange(e.currentTarget.value)\n    },\n    [onChange]\n  )\n\n  return (\n    <RadioRoot aria-disabled={isDisabled || isReadonly} className={className}>\n      <RadioInput\n        name={name}\n        value={value}\n        checked={isSelected}\n        aria-invalid={invalid}\n        onChange={handleChange}\n        disabled={isDisabled || isReadonly}\n        ref={ref}\n      />\n      {children != null && <RadioLabel>{children}</RadioLabel>}\n    </RadioRoot>\n  )\n})\n\nexport default memo(Radio)\n\nconst RadioRoot = styled.label`\n  display: grid;\n  grid-template-columns: auto 1fr;\n  grid-gap: 4px;\n  align-items: center;\n  cursor: pointer;\n\n  &[aria-disabled]:not([aria-disabled='false']) {\n    opacity: 0.32;\n    cursor: default;\n  }\n`\n\nexport const RadioInput = styled.input.attrs({ type: 'radio' })`\n  /** Make prior to browser default style */\n  &[type='radio'] {\n    appearance: none;\n    display: block;\n    box-sizing: border-box;\n\n    margin: 0;\n    padding: 6px;\n\n    width: 20px;\n    height: 20px;\n    cursor: pointer;\n    border-radius: 999999px;\n    background-color: var(--charcoal-surface1);\n    transition: 0.2s background-color, 0.2s box-shadow;\n\n    :disabled {\n      cursor: default;\n    }\n\n    &:not(:disabled):not([aria-disabled]),\n    &[aria-disabled='false'] {\n      &:hover {\n        background-color: var(--charcoal-surface1-hover);\n      }\n      &:active {\n        background-color: var(--charcoal-surface1-press);\n      }\n      ${focusVisibleFocusRingCss}\n      &[aria-invalid='true'] {\n        box-shadow: 0 0 0 4px rgba(255, 43, 0, 0.32);\n        &:focus {\n          box-shadow: 0 0 0 4px rgba(255, 43, 0, 0.32);\n        }\n      }\n    }\n\n    &:not(:checked) {\n      border-width: 2px;\n      border-style: solid;\n      border-color: var(--charcoal-text3);\n    }\n\n    &:checked {\n      background-color: var(--charcoal-brand);\n      &::after {\n        content: '';\n        display: block;\n        width: 8px;\n        height: 8px;\n        pointer-events: none;\n        background-color: var(--charcoal-text5);\n        border-radius: 999999px;\n        transition: 0.2s background-color, 0.2s box-shadow;\n      }\n\n      &:not(:disabled):not([aria-disabled]),\n      &[aria-disabled='false'] {\n        &:hover {\n          background-color: var(--charcoal-brand-hover);\n          &::after {\n            background-color: var(--charcoal-text5-hover);\n          }\n        }\n        &:active {\n          background-color: var(--charcoal-brand-press);\n          &::after {\n            background-color: var(--charcoal-text5-press);\n          }\n        }\n      }\n    }\n  }\n`\n\nconst RadioLabel = styled.div`\n  font-size: 14px;\n  line-height: 22px;\n  display: flow-root;\n  color: var(--charcoal-text2);\n\n  &::before {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-top: -4px;\n  }\n  &::after {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-bottom: -4px;\n  }\n`\n\nexport type RadioGroupProps = React.PropsWithChildren<{\n  className?: string\n  value?: string\n  label: string\n  name: string\n  onChange(next: string): void\n  disabled?: boolean\n  readonly?: boolean\n  invalid?: boolean\n}>\n\n// TODO: use (or polyfill) flex gap\nconst StyledRadioGroup = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 8px;\n`\n\ninterface RadioGroupContext {\n  name: string\n  selected?: string\n  disabled: boolean\n  readonly: boolean\n  invalid: boolean\n  onChange: (next: string) => void\n}\n\nconst RadioGroupContext = React.createContext<RadioGroupContext>({\n  name: undefined as never,\n  selected: undefined,\n  disabled: false,\n  readonly: false,\n  invalid: false,\n  onChange() {\n    throw new Error(\n      'Cannot find onChange() handler. Perhaps you forgot to wrap with <RadioGroup> ?'\n    )\n  },\n})\n\nexport function RadioGroup({\n  className,\n  value,\n  label,\n  name,\n  onChange,\n  disabled,\n  readonly,\n  invalid,\n  children,\n}: RadioGroupProps) {\n  const handleChange = useCallback(\n    (next: string) => {\n      onChange(next)\n    },\n    [onChange]\n  )\n\n  return (\n    <RadioGroupContext.Provider\n      value={{\n        name,\n        selected: value,\n        disabled: disabled ?? false,\n        readonly: readonly ?? false,\n        invalid: invalid ?? false,\n        onChange: handleChange,\n      }}\n    >\n      <StyledRadioGroup\n        role=\"radiogroup\"\n        aria-orientation=\"vertical\"\n        aria-label={label}\n        aria-invalid={invalid}\n        className={className}\n      >\n        {children}\n      </StyledRadioGroup>\n    </RadioGroupContext.Provider>\n  )\n}\n"],"names":[],"sourceRoot":""}
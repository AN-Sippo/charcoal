{"version":3,"file":"react-src-components-Modal-index-story.d8e6baa7.iframe.bundle.js","mappings":";AAqNA;;;;;;;;;;;;AAYA;;AAEA;AACA;;;;AAQA;;;;AAOA;;AAiBA;;;AAGA;;;AAGA;;;;AAMA;;;;;AAQA;;;;;AAKA;AAGA;;;;AAeA;;;;;ACzRA;AACA;;;;AAQA;AACA;AAGA;AACA;AAGA;AACA;AAGA;;;;;AAKA;;;;ACLA;;AAUA;AAGA;AAZA;;;AAkBA;;;;;AAKA;;;;;;;;;;;;;AClBA;;;;;;;;AAQA;;;AAYA;AAGA;;;;ACpBA;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AAGA;;;;;;;;;;;;AAYA;;AC5DA;AAGA;AACA;AAGA;AACA;AAOA;;;;AAIA;AACA;;;AAGA;AACA;;;;;AC/BA;AACA;;;;;AAKA;AAkBA;;;;ACmHA;AAGA;AACA;AAGA;;;;AAMA;;;;;;AAQA;;;;;;;;AAUA;;;AAGA;AAGA;;;;;;;;;;;;;AAiBA;AACA;;;;;;AAMA;;;AASA;;AAIA;AACA;AAGA;AACA","sources":["webpack://charcoal-ui/./packages/react/src/components/Modal/index.tsx","webpack://charcoal-ui/./packages/react/src/components/Modal/ModalPlumbing.tsx","webpack://charcoal-ui/./packages/react/src/components/Modal/__stories__/InternalScrollStory.tsx","webpack://charcoal-ui/./packages/react/src/components/Button/index.tsx","webpack://charcoal-ui/./packages/react/src/components/Clickable/index.tsx","webpack://charcoal-ui/./packages/react/src/components/FieldLabel/index.tsx","webpack://charcoal-ui/./packages/react/src/components/IconButton/index.tsx","webpack://charcoal-ui/./packages/react/src/components/TextField/index.tsx"],"sourcesContent":["import { useContext, forwardRef, memo } from 'react'\nimport * as React from 'react'\nimport {\n  AriaModalOverlayProps,\n  Overlay,\n  useModalOverlay,\n} from '@react-aria/overlays'\nimport styled, { css, useTheme } from 'styled-components'\nimport { theme } from '../../styled'\nimport { useDialog } from '@react-aria/dialog'\nimport { AriaDialogProps } from '@react-types/dialog'\nimport { columnSystem, COLUMN_UNIT, GUTTER_UNIT } from '@charcoal-ui/foundation'\nimport { unreachable } from '../../_lib'\nimport { maxWidth } from '@charcoal-ui/utils'\nimport { useMedia } from '@charcoal-ui/styled'\nimport { animated, useTransition, easings } from 'react-spring'\nimport Button, { ButtonProps } from '../Button'\nimport IconButton from '../IconButton'\nimport { useObjectRef } from '@react-aria/utils'\n\nexport type BottomSheet = boolean | 'full'\ntype Size = 'S' | 'M' | 'L'\n\nexport type ModalProps = AriaModalOverlayProps &\n  AriaDialogProps & {\n    children: React.ReactNode\n    zIndex?: number\n    title: string\n    size?: Size\n    bottomSheet?: BottomSheet\n    isOpen: boolean\n    onClose: () => void\n    className?: string\n\n    /**\n     * https://github.com/adobe/react-spectrum/issues/3787\n     * Next.jsで使用する際に発生するエラーの一時的な回避策でdocument.bodyを指定する必要がある\n     */\n    portalContainer?: HTMLElement\n  }\n\nconst DEFAULT_Z_INDEX = 10\n\n/**\n * モーダルコンポーネント。\n *\n * @example アプリケーションルートで `<OverlayProvider>` ないし `<CharcoalProvider>` で囲った上で利用する\n * ```tsx\n * import {\n *   OverlayProvider,\n *   Modal,\n *   ModalHeader,\n *   ModalBody,\n *   ModalButtons\n * } from '@charcoal-ui/react'\n *\n * <OverlayProvider>\n *   <App>\n *     <Modal title=\"Title\" isOpen={state.isOpen} onClose={() => state.close()} isDismissable>\n *       <ModalHeader />\n *       <ModalBody>\n *         ...\n *         <ModalButtons>...</ModalButtons>\n *       </ModalBody>\n *     </Modal>\n *   </App>\n * </OverlayProvider>\n * ```\n */\nconst Modal = forwardRef<HTMLDivElement, ModalProps>(function ModalInner(\n  { children, zIndex = DEFAULT_Z_INDEX, portalContainer, ...props },\n  external\n) {\n  const {\n    title,\n    size = 'M',\n    bottomSheet = false,\n    isDismissable,\n    onClose,\n    className,\n    isOpen = false,\n  } = props\n\n  const ref = useObjectRef<HTMLDivElement>(external)\n\n  const { modalProps, underlayProps } = useModalOverlay(\n    props,\n    {\n      close: onClose,\n      isOpen: isOpen,\n      // these props are not used actually.\n      // https://github.com/adobe/react-spectrum/blob/df14e3fb129b94b310f0397a701b83f006b51dfe/packages/%40react-aria/overlays/src/useModalOverlay.ts\n      open: () => {\n        // nope\n      },\n      setOpen: () => {\n        // nope\n      },\n      toggle: () => {\n        // nope\n      },\n    },\n    ref\n  )\n\n  const theme = useTheme()\n  const isMobile = useMedia(maxWidth(theme.breakpoint.screen1)) ?? false\n  const transitionEnabled = isMobile && bottomSheet !== false\n  const showDismiss = !isMobile || bottomSheet !== true\n\n  const transition = useTransition(isOpen, {\n    from: {\n      transform: 'translateY(100%)',\n      backgroundColor: 'rgba(0, 0, 0, 0)',\n      overflow: 'hidden',\n    },\n    enter: {\n      transform: 'translateY(0%)',\n      backgroundColor: 'rgba(0, 0, 0, 0.4)',\n    },\n    update: {\n      overflow: 'auto',\n    },\n    leave: {\n      transform: 'translateY(100%)',\n      backgroundColor: 'rgba(0, 0, 0, 0)',\n      overflow: 'hidden',\n    },\n    config: transitionEnabled\n      ? { duration: 400, easing: easings.easeOutQuart }\n      : { duration: 0 },\n  })\n\n  return transition(({ backgroundColor, transform, overflow }, item) => {\n    return (\n      item && (\n        <Overlay portalContainer={portalContainer}>\n          <ModalBackground\n            zIndex={zIndex}\n            {...underlayProps}\n            style={transitionEnabled ? { backgroundColor, overflow } : {}}\n            $bottomSheet={bottomSheet}\n          >\n            <ModalDialog\n              ref={ref}\n              {...modalProps}\n              style={transitionEnabled ? { transform } : {}}\n              size={size}\n              bottomSheet={bottomSheet}\n              className={className}\n            >\n              <Dialog>\n                <ModalContext.Provider\n                  value={{\n                    titleProps: {},\n                    title,\n                    close: onClose,\n                    showDismiss,\n                    bottomSheet,\n                  }}\n                >\n                  {children}\n                  {isDismissable === true && (\n                    <ModalCrossButton\n                      size=\"S\"\n                      icon=\"24/Close\"\n                      onClick={onClose}\n                    />\n                  )}\n                </ModalContext.Provider>\n              </Dialog>\n            </ModalDialog>\n          </ModalBackground>\n        </Overlay>\n      )\n    )\n  })\n})\n\nexport default memo(Modal)\n\nfunction Dialog({ children }: { children: React.ReactNode }) {\n  const r = React.useRef(null)\n  const { dialogProps } = useDialog(\n    {\n      role: 'dialog',\n    },\n    r\n  )\n  return <div {...dialogProps}>{children}</div>\n}\n\nexport const ModalContext = React.createContext<{\n  /**\n   * @deprecated\n   */\n  titleProps: React.HTMLAttributes<HTMLElement>\n  title: string\n  close?: () => void\n  showDismiss: boolean\n  bottomSheet: BottomSheet\n}>({\n  titleProps: {},\n  title: '',\n  close: undefined,\n  showDismiss: true,\n  bottomSheet: false,\n})\n\nconst ModalBackground = animated(styled.div<{\n  zIndex: number\n  $bottomSheet: BottomSheet\n}>`\n  z-index: ${({ zIndex }) => zIndex};\n  overflow: auto;\n  display: flex;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  justify-content: center;\n  padding: 40px 0;\n  box-sizing: border-box;\n\n  background-color: ${({ theme }) => theme.color.surface4};\n\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    ${(p) =>\n      p.$bottomSheet !== false &&\n      css`\n        padding: 0;\n      `}\n  }\n`)\n\nconst ModalDialog = animated(styled.div<{\n  size: Size\n  bottomSheet: BottomSheet\n}>`\n  margin: auto;\n  position: relative;\n  height: fit-content;\n  width: ${(p) => {\n    switch (p.size) {\n      case 'S': {\n        return columnSystem(3, COLUMN_UNIT, GUTTER_UNIT) + GUTTER_UNIT * 2\n      }\n      case 'M': {\n        return columnSystem(4, COLUMN_UNIT, GUTTER_UNIT) + GUTTER_UNIT * 2\n      }\n      case 'L': {\n        return columnSystem(6, COLUMN_UNIT, GUTTER_UNIT) + GUTTER_UNIT * 2\n      }\n      default: {\n        return unreachable(p.size)\n      }\n    }\n  }}px;\n\n  background-color: ${({ theme }) => theme.color.background1};\n  border-radius: 24px;\n\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    max-width: 440px;\n    width: calc(100% - 48px);\n    ${(p) =>\n      p.bottomSheet !== false &&\n      css`\n        width: 100%;\n        border-radius: 0;\n        margin: auto 0 0 0;\n        ${p.bottomSheet === 'full' &&\n        css`\n          min-height: 100%;\n        `}\n      `}\n  }\n`)\n\nconst ModalCrossButton = styled(IconButton)`\n  position: absolute;\n  top: 8px;\n  right: 8px;\n\n  ${theme((o) => [o.font.text3.hover.press])}\n`\n\nexport function ModalTitle(props: React.HTMLAttributes<HTMLHeadingElement>) {\n  const { titleProps, title } = useContext(ModalContext)\n  return (\n    <ModalHeading {...titleProps} {...props}>\n      {title}\n    </ModalHeading>\n  )\n}\n\nconst ModalHeading = styled.h3`\n  margin: 0;\n  font-weight: inherit;\n  font-size: inherit;\n`\n\nexport function ModalDismissButton({ children, ...props }: ButtonProps) {\n  const { close, showDismiss } = useContext(ModalContext)\n\n  if (!showDismiss) {\n    return null\n  }\n\n  return (\n    <Button {...props} onClick={close} fullWidth>\n      {children}\n    </Button>\n  )\n}\n","import { BottomSheet, ModalContext, ModalTitle } from '.'\nimport styled, { css } from 'styled-components'\nimport { theme } from '../../styled'\nimport { useContext } from 'react'\nimport { maxWidth } from '@charcoal-ui/utils'\n\nexport function ModalHeader() {\n  const modalCtx = useContext(ModalContext)\n  return (\n    <ModalHeaderRoot $bottomSheet={modalCtx.bottomSheet}>\n      <StyledModalTitle />\n    </ModalHeaderRoot>\n  )\n}\n\nconst ModalHeaderRoot = styled.div<{\n  $bottomSheet: BottomSheet\n}>`\n  height: 64px;\n  display: grid;\n  align-content: center;\n  justify-content: center;\n  @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n    ${(p) =>\n      p.$bottomSheet !== false &&\n      css`\n        height: 48px;\n      `}\n  }\n`\n\nconst StyledModalTitle = styled(ModalTitle)`\n  ${theme((o) => [o.font.text1, o.typography(16).bold])}\n`\n\nexport const ModalAlign = styled.div`\n  ${theme((o) => [o.padding.horizontal(16)])}\n`\n\nexport const ModalBody = styled.div`\n  ${theme((o) => [o.padding.bottom(40)])}\n`\n\nexport const ModalButtons = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-row-gap: 8px;\n\n  ${theme((o) => [o.padding.horizontal(16).top(16)])}\n`\n","import { Story } from '../../../_lib/compat'\nimport Modal, { BottomSheet, ModalProps } from '..'\nimport { OverlayProvider } from '@react-aria/overlays'\nimport { useOverlayTriggerState } from 'react-stately'\nimport Button from '../../Button'\nimport { ModalBody, ModalButtons, ModalHeader } from '../ModalPlumbing'\nimport styled, { css } from 'styled-components'\nimport { maxWidth } from '@charcoal-ui/utils'\n\nexport const InternalScrollStory: Story<ModalProps> = (args: ModalProps) => {\n  const state = useOverlayTriggerState({})\n  return (\n    <OverlayProvider>\n      <Button onClick={() => state.open()}>Open Modal</Button>\n\n      <Modal {...args} isOpen={state.isOpen} onClose={() => state.close()}>\n        <ModalHeader />\n        <ModalBody>\n          <ModalBodyOverflowDiv $offset={56} $bottomSheet={args.bottomSheet}>\n            <div\n              style={{\n                height: 1000,\n                background: `linear-gradient(#e66465, #9198e5)`,\n              }}\n            ></div>\n          </ModalBodyOverflowDiv>\n          <TopBorderButtons>\n            <Button fullWidth onClick={() => state.close()}>\n              Close\n            </Button>\n          </TopBorderButtons>\n        </ModalBody>\n      </Modal>\n    </OverlayProvider>\n  )\n}\n\n// underlay padding-top: 40px (desktop)\n// underlay padding-bottom: 40px (desktop)\n// modal header: 64px (desktop)\n// modal header: 48px (mobile-bottom-sheet)\n// modal padding-bottom: 40px\n// button and space: 56px\nconst MAX_HEIGHT_OFFSET = 64 + 40 + 40 + 40\nconst MAX_HEIGHT_OFFSET_MOBILE = MAX_HEIGHT_OFFSET - 40 * 2 - 16\nconst ModalBodyOverflowDiv = styled.div<{\n  $offset: number\n  $bottomSheet?: BottomSheet\n}>`\n  overflow: auto;\n  max-height: calc(\n    100vh - ${MAX_HEIGHT_OFFSET}px - ${({ $offset }) => $offset}px\n  );\n  ${({ $bottomSheet, $offset }) =>\n    ($bottomSheet === true || $bottomSheet === 'full') &&\n    css`\n      @media ${({ theme }) => maxWidth(theme.breakpoint.screen1)} {\n        max-height: calc(100vh - ${MAX_HEIGHT_OFFSET_MOBILE}px - ${$offset}px);\n      }\n    `}\n`\n\nconst TopBorderButtons = styled(ModalButtons)`\n  position: relative;\n  &::before {\n    content: '';\n    pointer-events: none;\n    border-top: 1px solid ${({ theme }) => theme.border.default.color};\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n  }\n`\n","import { forwardRef } from 'react'\nimport styled from 'styled-components'\nimport { unreachable } from '../../_lib'\nimport { theme } from '../../styled'\nimport Clickable, { ClickableElement, ClickableProps } from '../Clickable'\n\ntype Variant = 'Primary' | 'Default' | 'Overlay' | 'Danger' | 'Navigation'\ntype Size = 'S' | 'M'\n\ninterface StyledProps {\n  $variant: Variant\n  $fullWidth: boolean\n  $size: Size\n}\n\nexport type ButtonProps = Partial<{\n  variant: Variant\n  size: Size\n  fullWidth: boolean\n}> &\n  ClickableProps\n\nconst Button = forwardRef<ClickableElement, ButtonProps>(function Button(\n  {\n    children,\n    variant = 'Default',\n    size = 'M',\n    fullWidth: fixed = false,\n    disabled = false,\n    ...rest\n  },\n  ref\n) {\n  return (\n    <StyledButton\n      {...rest}\n      disabled={disabled}\n      $variant={variant}\n      $size={size}\n      $fullWidth={fixed}\n      ref={ref}\n    >\n      {children}\n    </StyledButton>\n  )\n})\nexport default Button\n\nconst StyledButton = styled(Clickable)<StyledProps>`\n  width: ${(p) => (p.$fullWidth ? 'stretch' : 'min-content')};\n  display: inline-grid;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  user-select: none;\n  white-space: nowrap;\n\n  ${(p) =>\n    theme((o) => [\n      o.font[variantToFont(p.$variant)].hover.press,\n      o.bg[variantToBackground(p.$variant)].hover.press,\n      o.typography(14).bold.preserveHalfLeading,\n      o.padding.horizontal(p.$size === 'M' ? 24 : 16),\n      o.disabled,\n      o.borderRadius('oval'),\n      o.outline.default.focus,\n    ])}\n\n  /* よく考えたらheight=32って定義が存在しないな... */\n  height: ${(p) => (p.$size === 'M' ? 40 : 32)}px;\n`\n\nfunction variantToBackground(variant: Variant) {\n  switch (variant) {\n    case 'Overlay':\n      return 'surface4'\n    case 'Default':\n      return 'surface3'\n    case 'Primary':\n      return 'brand'\n    case 'Navigation':\n      return 'surface6'\n    case 'Danger':\n      return 'assertive'\n    default:\n      return unreachable(variant)\n  }\n}\n\nfunction variantToFont(variant: Variant) {\n  switch (variant) {\n    case 'Overlay':\n      return 'text5'\n    case 'Default':\n      return 'text2'\n    case 'Primary':\n      return 'text5'\n    case 'Navigation':\n      return 'text5'\n    case 'Danger':\n      return 'text5'\n    default:\n      return unreachable(variant)\n  }\n}\n","import * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport {\n  LinkProps,\n  useComponentAbstraction,\n} from '../../core/ComponentAbstraction'\nimport { disabledSelector } from '@charcoal-ui/utils'\n\ninterface BaseProps {\n  /**\n   * クリックの無効化\n   */\n  disabled?: boolean\n}\n\ninterface LinkBaseProps {\n  /**\n   * リンクのURL。指定するとbuttonタグではなくaタグとして描画される\n   */\n  to: string\n}\n\nexport type ClickableProps =\n  | (BaseProps & Omit<React.ComponentPropsWithoutRef<'button'>, 'disabled'>)\n  | (BaseProps & LinkBaseProps & Omit<LinkProps, 'to'>)\nexport type ClickableElement = HTMLButtonElement & HTMLAnchorElement\n\nconst Clickable = React.forwardRef<ClickableElement, ClickableProps>(\n  function Clickable(props, ref) {\n    const { Link } = useComponentAbstraction()\n    if ('to' in props) {\n      const { onClick, disabled = false, ...rest } = props\n      return (\n        <A<typeof Link>\n          {...rest}\n          as={disabled ? undefined : Link}\n          onClick={disabled ? undefined : onClick}\n          aria-disabled={disabled}\n          ref={ref}\n        />\n      )\n    } else {\n      return <Button {...props} ref={ref} />\n    }\n  }\n)\nexport default Clickable\n\nconst clickableCss = css`\n  /* Clickable style */\n  cursor: pointer;\n\n  ${disabledSelector} {\n    cursor: default;\n  }\n`\n\nconst Button = styled.button`\n  /* Reset button appearance */\n  appearance: none;\n  background: transparent;\n  padding: 0;\n  border-style: none;\n  outline: none;\n  color: inherit;\n  text-rendering: inherit;\n  letter-spacing: inherit;\n  word-spacing: inherit;\n\n  &:focus {\n    outline: none;\n  }\n\n  /* Change the font styles in all browsers. */\n  font: inherit;\n\n  /* Remove the margin in Firefox and Safari. */\n  margin: 0;\n\n  /* Show the overflow in Edge. */\n  overflow: visible;\n\n  /* Remove the inheritance of text transform in Firefox. */\n  text-transform: none;\n\n  /* Remove the inner border and padding in Firefox. */\n  &::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n\n  ${clickableCss}\n`\n\nconst A = styled.span`\n  /* Reset a-tag appearance */\n  color: inherit;\n\n  &:focus {\n    outline: none;\n  }\n\n  .text {\n    top: calc(1em + 2em);\n  }\n\n  ${clickableCss}\n`\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { createTheme } from '@charcoal-ui/styled'\n\nexport interface FieldLabelProps\n  extends React.LabelHTMLAttributes<HTMLLabelElement> {\n  readonly className?: string\n  readonly label: string\n  readonly subLabel?: React.ReactNode\n  readonly required?: boolean\n  // TODO: 翻訳用のContextで注入する\n  readonly requiredText?: string\n}\n\nconst FieldLabel = React.forwardRef<HTMLLabelElement, FieldLabelProps>(\n  function FieldLabel(\n    {\n      style,\n      className,\n      label,\n      required = false,\n      requiredText,\n      subLabel,\n      ...labelProps\n    },\n    ref\n  ) {\n    return (\n      <FieldLabelWrapper style={style} className={className}>\n        <Label ref={ref} {...labelProps}>\n          {label}\n        </Label>\n        {required && <RequiredText>{requiredText}</RequiredText>}\n        <SubLabelClickable>\n          <span>{subLabel}</span>\n        </SubLabelClickable>\n      </FieldLabelWrapper>\n    )\n  }\n)\n\nexport default FieldLabel\n\nconst theme = createTheme(styled)\n\nconst Label = styled.label`\n  ${theme((o) => [o.typography(14).bold, o.font.text1])}\n`\n\nconst RequiredText = styled.span`\n  ${theme((o) => [o.typography(14), o.font.text2])}\n`\n\nconst SubLabelClickable = styled.div`\n  ${theme((o) => [\n    o.typography(14),\n    o.font.text3.hover.press,\n    o.outline.default.focus,\n  ])}\n`\n\nconst FieldLabelWrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n\n  > ${RequiredText} {\n    ${theme((o) => o.margin.left(4))}\n  }\n\n  > ${SubLabelClickable} {\n    ${theme((o) => o.margin.left('auto'))}\n  }\n`\n","import { forwardRef } from 'react'\nimport styled from 'styled-components'\nimport { theme } from '../../styled'\nimport Clickable, { ClickableElement, ClickableProps } from '../Clickable'\nimport type { KnownIconType } from '@charcoal-ui/icons'\n\ntype Variant = 'Default' | 'Overlay'\ntype Size = 'XS' | 'S' | 'M'\n\ninterface StyledProps {\n  readonly variant?: Variant\n  readonly size?: Size\n  readonly icon: keyof KnownIconType\n}\n\nexport type IconButtonProps = StyledProps & ClickableProps\n\nconst IconButton = forwardRef<ClickableElement, IconButtonProps>(\n  function IconButtonInner(\n    { variant = 'Default', size = 'M', icon, ...rest }: IconButtonProps,\n    ref\n  ) {\n    validateIconSize(size, icon)\n    return (\n      <StyledIconButton {...rest} ref={ref} variant={variant} size={size}>\n        <pixiv-icon name={icon} />\n      </StyledIconButton>\n    )\n  }\n)\n\nexport default IconButton\n\nconst StyledIconButton = styled(Clickable).attrs<\n  Required<StyledProps>,\n  ReturnType<typeof styledProps>\n>(styledProps)`\n  user-select: none;\n\n  width: ${(p) => p.width}px;\n  height: ${(p) => p.height}px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  ${({ font, background }) =>\n    theme((o) => [\n      o.font[font],\n      o.bg[background].hover.press,\n      o.disabled,\n      o.borderRadius('oval'),\n      o.outline.default.focus,\n    ])}\n`\n\nfunction styledProps(props: Required<StyledProps>) {\n  return {\n    ...props,\n    ...variantToProps(props.variant),\n    ...sizeToProps(props.size),\n  }\n}\n\nfunction variantToProps(variant: Variant) {\n  switch (variant) {\n    case 'Default':\n      return { font: 'text3', background: 'transparent' } as const\n    case 'Overlay':\n      return { font: 'text5', background: 'surface4' } as const\n  }\n}\n\nfunction sizeToProps(size: Size) {\n  switch (size) {\n    case 'XS':\n      return {\n        width: 20,\n        height: 20,\n      }\n    case 'S':\n      return {\n        width: 32,\n        height: 32,\n      }\n    case 'M':\n      return {\n        width: 40,\n        height: 40,\n      }\n  }\n}\n\n/**\n * validates matches of size and icon\n */\nfunction validateIconSize(size: Size, icon: keyof KnownIconType) {\n  let requiredIconSize: string\n  switch (size) {\n    case 'XS':\n      requiredIconSize = '16'\n      break\n    case 'S':\n    case 'M':\n      requiredIconSize = '24'\n      break\n  }\n  // アイコン名は サイズ/名前\n  const result = /^\\d*/u.exec(icon)\n  if (result == null) {\n    throw new Error('Invalid icon name')\n  }\n  const [iconSize] = result\n  if (iconSize !== requiredIconSize) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `IconButton with size \"${size}\" expect icon size \"${requiredIconSize}, but got \"${iconSize}\"`\n    )\n  }\n}\n","import { useTextField } from '@react-aria/textfield'\nimport { useVisuallyHidden } from '@react-aria/visually-hidden'\nimport { ReactNode, useCallback, useEffect, useRef, useState } from 'react'\nimport * as React from 'react'\nimport styled from 'styled-components'\nimport FieldLabel, { FieldLabelProps } from '../FieldLabel'\nimport { countCodePointsInString, mergeRefs } from '../../_lib'\nimport { theme } from '../../styled'\nimport { ReactAreaUseTextFieldCompat } from '../../_lib/compat'\n\ntype DOMProps = Omit<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  // react-ariaのhookは、onChangeが`(v: string) => void`想定\n  | 'onChange'\n\n  // RDFa Attributeとかぶる\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/58d57ca87ac7be0d306c0844dc254e90c150bd0d/types/react/index.d.ts#L1951\n  | 'prefix'\n\n  // ReactAreaUseTextFieldCompatに書いてあるような事情で、ここにあるイベントハンドラの型をゆるめる\n  | keyof ReactAreaUseTextFieldCompat\n>\n\nexport interface TextFieldProps\n  extends Pick<FieldLabelProps, 'label' | 'requiredText' | 'subLabel'>,\n    DOMProps,\n    ReactAreaUseTextFieldCompat {\n  readonly prefix?: ReactNode\n  readonly suffix?: ReactNode\n\n  // <input> 要素は number とか string[] もありうるが、今はこれしか想定してない\n  readonly defaultValue?: string\n  readonly value?: string\n  readonly onChange?: (value: string) => void\n\n  // react-ariaの型定義のせいでHTMLInputElementにできない\n  readonly onKeyDown?: (event: React.KeyboardEvent<Element>) => void\n  readonly onFocus?: (event: React.FocusEvent<Element>) => void\n  readonly onBlur?: (event: React.FocusEvent<Element>) => void\n\n  readonly showCount?: boolean\n  readonly showLabel?: boolean\n  readonly assistiveText?: string\n  readonly invalid?: boolean\n}\n\nconst TextField = React.forwardRef<HTMLInputElement, TextFieldProps>(\n  function SingleLineTextFieldInner({ onChange, ...props }, forwardRef) {\n    const {\n      className,\n      showLabel = false,\n      showCount = false,\n      label,\n      requiredText,\n      subLabel,\n      disabled = false,\n      required,\n      invalid = false,\n      assistiveText,\n      maxLength,\n      prefix = null,\n      suffix = null,\n    } = props\n\n    const { visuallyHiddenProps } = useVisuallyHidden()\n    const ariaRef = useRef<HTMLInputElement>(null)\n    const prefixRef = useRef<HTMLSpanElement>(null)\n    const suffixRef = useRef<HTMLSpanElement>(null)\n    const [count, setCount] = useState(\n      countCodePointsInString(props.value ?? '')\n    )\n    const [prefixWidth, setPrefixWidth] = useState(0)\n    const [suffixWidth, setSuffixWidth] = useState(0)\n\n    const nonControlled = props.value === undefined\n    const handleChange = useCallback(\n      (value: string) => {\n        const count = countCodePointsInString(value)\n        if (maxLength !== undefined && count > maxLength) {\n          return\n        }\n        if (nonControlled) {\n          setCount(count)\n        }\n        onChange?.(value)\n      },\n      [maxLength, nonControlled, onChange]\n    )\n\n    useEffect(() => {\n      setCount(countCodePointsInString(props.value ?? ''))\n    }, [props.value])\n\n    const { inputProps, labelProps, descriptionProps, errorMessageProps } =\n      useTextField(\n        {\n          inputElementType: 'input',\n          isDisabled: disabled,\n          isRequired: required,\n          validationState: invalid ? 'invalid' : 'valid',\n          description: !invalid && assistiveText,\n          errorMessage: invalid && assistiveText,\n          onChange: handleChange,\n          ...props,\n        },\n        ariaRef\n      )\n\n    useEffect(() => {\n      const prefixObserver = new ResizeObserver((entries) => {\n        setPrefixWidth(entries[0].contentRect.width)\n      })\n      const suffixObserver = new ResizeObserver((entries) => {\n        setSuffixWidth(entries[0].contentRect.width)\n      })\n\n      if (prefixRef.current !== null) {\n        prefixObserver.observe(prefixRef.current)\n      }\n      if (suffixRef.current !== null) {\n        suffixObserver.observe(suffixRef.current)\n      }\n\n      return () => {\n        suffixObserver.disconnect()\n        prefixObserver.disconnect()\n      }\n    }, [])\n\n    return (\n      <TextFieldRoot className={className} isDisabled={disabled}>\n        <TextFieldLabel\n          label={label}\n          requiredText={requiredText}\n          required={required}\n          subLabel={subLabel}\n          {...labelProps}\n          {...(!showLabel ? visuallyHiddenProps : {})}\n        />\n        <StyledInputContainer>\n          <PrefixContainer ref={prefixRef}>\n            <Affix>{prefix}</Affix>\n          </PrefixContainer>\n          <StyledInput\n            ref={mergeRefs(forwardRef, ariaRef)}\n            invalid={invalid}\n            extraLeftPadding={prefixWidth}\n            extraRightPadding={suffixWidth}\n            {...inputProps}\n          />\n          <SuffixContainer ref={suffixRef}>\n            <Affix>{suffix}</Affix>\n            {showCount && (\n              <SingleLineCounter>\n                {maxLength !== undefined ? `${count}/${maxLength}` : count}\n              </SingleLineCounter>\n            )}\n          </SuffixContainer>\n        </StyledInputContainer>\n        {assistiveText != null && assistiveText.length !== 0 && (\n          <AssistiveText\n            invalid={invalid}\n            {...(invalid ? errorMessageProps : descriptionProps)}\n          >\n            {assistiveText}\n          </AssistiveText>\n        )}\n      </TextFieldRoot>\n    )\n  }\n)\n\nexport default TextField\n\nconst TextFieldRoot = styled.div<{ isDisabled: boolean }>`\n  display: flex;\n  flex-direction: column;\n\n  ${(p) => p.isDisabled && { opacity: p.theme.elementEffect.disabled.opacity }}\n`\n\nconst TextFieldLabel = styled(FieldLabel)`\n  ${theme((o) => o.margin.bottom(8))}\n`\n\nconst StyledInputContainer = styled.div`\n  height: 40px;\n  display: grid;\n  position: relative;\n`\n\nconst PrefixContainer = styled.span`\n  position: absolute;\n  top: 50%;\n  left: 8px;\n  transform: translateY(-50%);\n  z-index: 1;\n`\n\nconst SuffixContainer = styled.span`\n  position: absolute;\n  top: 50%;\n  right: 8px;\n  transform: translateY(-50%);\n\n  display: flex;\n  gap: 8px;\n`\n\nconst Affix = styled.span`\n  user-select: none;\n\n  ${theme((o) => [o.typography(14).preserveHalfLeading, o.font.text2])}\n`\n\nconst StyledInput = styled.input<{\n  invalid: boolean\n  extraLeftPadding: number\n  extraRightPadding: number\n}>`\n  border: none;\n  box-sizing: border-box;\n  outline: none;\n  font-family: inherit;\n\n  /* Prevent zooming for iOS Safari */\n  transform-origin: top left;\n  transform: scale(0.875);\n  width: calc(100% / 0.875);\n  height: calc(100% / 0.875);\n  font-size: calc(14px / 0.875);\n  line-height: calc(22px / 0.875);\n  padding-left: calc((8px + ${(p) => p.extraLeftPadding}px) / 0.875);\n  padding-right: calc((8px + ${(p) => p.extraRightPadding}px) / 0.875);\n  border-radius: calc(4px / 0.875);\n\n  /* Display box-shadow for iOS Safari */\n  appearance: none;\n\n  ${(p) =>\n    theme((o) => [\n      o.bg.surface3.hover,\n      o.outline.default.focus,\n      p.invalid && o.outline.assertive,\n      o.font.text2,\n    ])}\n\n  &::placeholder {\n    ${theme((o) => o.font.text3)}\n  }\n`\n\nconst SingleLineCounter = styled.span`\n  ${theme((o) => [o.typography(14).preserveHalfLeading, o.font.text3])}\n`\n\nconst AssistiveText = styled.p<{ invalid: boolean }>`\n  ${(p) =>\n    theme((o) => [\n      o.typography(14),\n      o.margin.top(8),\n      o.margin.bottom(0),\n      o.font[p.invalid ? 'assertive' : 'text1'],\n    ])}\n`\n"],"names":[],"sourceRoot":""}
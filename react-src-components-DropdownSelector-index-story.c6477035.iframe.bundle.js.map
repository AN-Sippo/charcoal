{"version":3,"file":"react-src-components-DropdownSelector-index-story.c6477035.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;AA+BA;;;;;;AAQA;;;;;;AC0IA;AAGA;;;;;;;;;AASA;AACA;;;;;;;;;;AAUA;;;AAGA;;;AAOA;;;;;;;;;;;;;;;AAeA;;AAEA;AACA;;;;;;;;;;;AAaA","sources":["webpack://charcoal-ui/./packages/react/src/components/DropdownSelector/MenuItemGroup/index.tsx","webpack://charcoal-ui/./packages/react/src/components/TextArea/index.tsx"],"sourcesContent":["import styled from 'styled-components'\nimport MenuItem from '../MenuItem'\nimport { Divider } from '../Divider'\n\ntype MenuItemGroupChild = React.ReactElement<typeof MenuItem | typeof Divider>\n\nexport type MenuItemGroupProps = {\n  text: string\n  children: MenuItemGroupChild | MenuItemGroupChild[]\n}\n\n/**\n * 項目のリストを分類する見出しをつけるコンテナ要素\n */\nexport default function MenuItemGroup(props: MenuItemGroupProps) {\n  return (\n    <StyledLi role=\"presentation\">\n      <TextSpan>{props.text}</TextSpan>\n      <StyledUl role=\"group\">{props.children}</StyledUl>\n    </StyledLi>\n  )\n}\n\nconst TextSpan = styled.span`\n  display: block;\n  color: var(--charcoal-text3);\n  font-size: 12px;\n  font-weight: bold;\n  padding: 12px 0 8px 16px;\n`\n\nconst StyledUl = styled.ul`\n  padding-left: 0;\n  margin: 0;\n  box-sizing: border-box;\n  list-style: none;\n  overflow: hidden;\n`\n\nconst StyledLi = styled.li`\n  display: block;\n`\n","import { useTextField } from '@react-aria/textfield'\nimport { useVisuallyHidden } from '@react-aria/visually-hidden'\nimport { forwardRef, useCallback, useEffect, useRef, useState } from 'react'\nimport styled, { css } from 'styled-components'\nimport { FieldLabelProps } from '../FieldLabel'\nimport { countCodePointsInString, mergeRefs } from '../../_lib'\nimport { ReactAreaUseTextFieldCompat } from '../../_lib/compat'\nimport { AssistiveText, TextFieldLabel } from '../TextField'\nimport { useFocusWithClick } from '../TextField/useFocusWithClick'\nimport { mergeProps } from '@react-aria/utils'\n\ntype DOMProps = Omit<\n  React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n  // react-ariaのhookは、onChangeが`(v: string) => void`想定\n  | 'onChange'\n  // ReactAreaUseTextFieldCompatに書いてあるような事情で、ここにあるイベントハンドラの型をゆるめる\n  | keyof ReactAreaUseTextFieldCompat\n>\n\nexport interface TextAreaProps\n  extends Pick<FieldLabelProps, 'label' | 'requiredText' | 'subLabel'>,\n    DOMProps,\n    ReactAreaUseTextFieldCompat {\n  readonly autoHeight?: boolean\n  readonly rows?: number\n\n  // <input> 要素は number とか string[] もありうるが、今はこれしか想定してない\n  readonly defaultValue?: string\n  readonly value?: string\n  readonly onChange?: (value: string) => void\n\n  // react-ariaの型定義のせいでHTMLTextAreaElementにできない\n  readonly onKeyDown?: (event: React.KeyboardEvent<Element>) => void\n  readonly onFocus?: (event: React.FocusEvent<Element>) => void\n  readonly onBlur?: (event: React.FocusEvent<Element>) => void\n\n  readonly showCount?: boolean\n  readonly showLabel?: boolean\n  readonly assistiveText?: string\n  readonly invalid?: boolean\n}\n\nconst TextArea = forwardRef<HTMLTextAreaElement, TextAreaProps>(\n  function TextAreaInner({ onChange, ...props }, forwardRef) {\n    const {\n      className,\n      showCount = false,\n      showLabel = false,\n      label,\n      requiredText,\n      subLabel,\n      disabled = false,\n      required,\n      invalid = false,\n      assistiveText,\n      maxLength,\n      autoHeight = false,\n      rows: initialRows = 4,\n      ...restProps\n    } = props\n\n    const { visuallyHiddenProps } = useVisuallyHidden()\n    const textareaRef = useRef<HTMLTextAreaElement>(null)\n    const ariaRef = useRef<HTMLTextAreaElement>(null)\n    const [count, setCount] = useState(\n      countCodePointsInString(props.value ?? '')\n    )\n    const [rows, setRows] = useState(initialRows)\n\n    const syncHeight = useCallback(\n      (textarea: HTMLTextAreaElement) => {\n        const rows = (`${textarea.value}\\n`.match(/\\n/gu)?.length ?? 0) || 1\n        setRows(initialRows <= rows ? rows : initialRows)\n      },\n      [initialRows]\n    )\n\n    const nonControlled = props.value === undefined\n    const handleChange = useCallback(\n      (value: string) => {\n        const count = countCodePointsInString(value)\n        if (maxLength !== undefined && count > maxLength) {\n          return\n        }\n        if (nonControlled) {\n          setCount(count)\n        }\n        if (autoHeight && textareaRef.current !== null) {\n          syncHeight(textareaRef.current)\n        }\n        onChange?.(value)\n      },\n      [autoHeight, maxLength, nonControlled, onChange, syncHeight]\n    )\n\n    useEffect(() => {\n      setCount(countCodePointsInString(props.value ?? ''))\n    }, [props.value])\n\n    const {\n      inputProps: ariaInputProps,\n      labelProps,\n      descriptionProps,\n      errorMessageProps,\n    } = useTextField(\n      {\n        inputElementType: 'textarea',\n        isDisabled: disabled,\n        isRequired: required,\n        validationState: invalid ? 'invalid' : 'valid',\n        description: !invalid && assistiveText,\n        errorMessage: invalid && assistiveText,\n        onChange: handleChange,\n        ...props,\n      },\n      ariaRef\n    )\n\n    useEffect(() => {\n      if (autoHeight && textareaRef.current !== null) {\n        syncHeight(textareaRef.current)\n      }\n    }, [autoHeight, syncHeight])\n\n    const containerRef = useRef(null)\n\n    useFocusWithClick(containerRef, ariaRef)\n\n    const inputProps = mergeProps(restProps, ariaInputProps)\n\n    return (\n      <TextFieldRoot className={className} isDisabled={disabled}>\n        <TextFieldLabel\n          label={label}\n          requiredText={requiredText}\n          required={required}\n          subLabel={subLabel}\n          {...labelProps}\n          {...(!showLabel ? visuallyHiddenProps : {})}\n        />\n        <StyledTextareaContainer\n          ref={containerRef}\n          invalid={invalid}\n          rows={showCount ? rows + 1 : rows}\n          aria-disabled={disabled === true ? 'true' : undefined}\n        >\n          <StyledTextarea\n            ref={mergeRefs(textareaRef, forwardRef, ariaRef)}\n            rows={rows}\n            noBottomPadding={showCount}\n            {...inputProps}\n          />\n          {showCount && (\n            <MultiLineCounter>\n              {maxLength !== undefined ? `${count}/${maxLength}` : count}\n            </MultiLineCounter>\n          )}\n        </StyledTextareaContainer>\n        {assistiveText != null && assistiveText.length !== 0 && (\n          <AssistiveText\n            invalid={invalid}\n            {...(invalid ? errorMessageProps : descriptionProps)}\n          >\n            {assistiveText}\n          </AssistiveText>\n        )}\n      </TextFieldRoot>\n    )\n  }\n)\n\nexport default TextArea\n\nconst TextFieldRoot = styled.div<{ isDisabled: boolean }>`\n  display: flex;\n  flex-direction: column;\n\n  ${(p) => p.isDisabled && { opacity: p.theme.elementEffect.disabled.opacity }}\n`\n\nconst StyledTextareaContainer = styled.div<{ rows: number; invalid: boolean }>`\n  position: relative;\n  overflow: hidden;\n\n  color: var(--charcoal-text2);\n  background-color: var(--charcoal-surface3);\n  border-radius: 4px;\n  transition: 0.2s background-color, 0.2s box-shadow;\n\n  ${({ rows }) => css`\n    height: calc(22px * ${rows} + 18px);\n  `};\n\n  :not([aria-disabled]):hover,\n  [aria-disabled='false']:hover {\n    background-color: var(--charcoal-surface3-hover);\n  }\n  :focus-within {\n    outline: none;\n    box-shadow: 0 0 0 4px\n      ${(p) => (p.invalid ? `rgba(255,43,0,0.32)` : `rgba(0, 150, 250, 0.32);`)};\n  }\n\n  ${(p) =>\n    p.invalid &&\n    css`\n      box-shadow: 0 0 0 4px rgba(255, 43, 0, 0.32);\n    `}\n`\n\nconst StyledTextarea = styled.textarea<{ noBottomPadding: boolean }>`\n  border: none;\n  outline: none;\n  resize: none;\n  font-family: inherit;\n  color: inherit;\n  box-sizing: border-box;\n\n  /* Prevent zooming for iOS Safari */\n  transform-origin: top left;\n  transform: scale(0.875);\n  width: calc(100% / 0.875);\n  font-size: calc(14px / 0.875);\n  line-height: calc(22px / 0.875);\n  padding: calc(9px / 0.875) calc(8px / 0.875)\n    ${(p) => (p.noBottomPadding ? 0 : '')};\n\n  ${({ rows = 1, noBottomPadding }) => css`\n    height: calc(22px / 0.875 * ${rows} + ${noBottomPadding ? 9 : 20}px);\n  `};\n\n  /* Display box-shadow for iOS Safari */\n  appearance: none;\n\n  background: none;\n\n  &::placeholder {\n    color: var(--charcoal-text3);\n  }\n`\n\nconst MultiLineCounter = styled.span`\n  position: absolute;\n  bottom: 9px;\n  right: 8px;\n\n  line-height: 22px;\n  font-size: 14px;\n  color: var(--charcoal-text3);\n`\n"],"names":[],"sourceRoot":""}
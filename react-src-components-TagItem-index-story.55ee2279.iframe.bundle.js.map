{"version":3,"file":"react-src-components-TagItem-index-story.55ee2279.iframe.bundle.js","mappings":";AAyFA;AACA;AAUA;;;AAKA;;;;;;;;AAQA;AACA;AACA;;;;;;AAOA;;;;;;;;AAUA;;;;;;;;AAUA;AACA;;;;AAMA;;;;;;;;;;;;AAcA;;;;AAMA;;;;;AAOA;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;AAMA;AACA;AAGA;;;;;;;;AAUA","sources":["webpack://charcoal-ui/./packages/react/src/components/TagItem/index.tsx"],"sourcesContent":["import { forwardRef, memo, useMemo, ComponentPropsWithoutRef } from 'react'\nimport { useObjectRef } from '@react-aria/utils'\nimport styled, { css } from 'styled-components'\nimport { px } from '@charcoal-ui/utils'\nimport { AriaButtonProps, useButton } from '@react-aria/button'\nimport Icon from '../Icon'\nimport { focusVisibleFocusRingCss } from '@charcoal-ui/styled'\n\nconst sizeMap = {\n  S: 32,\n  M: 40,\n}\n\nexport type TagItemProps = {\n  label: string\n  translatedLabel?: string\n  bgColor?: string\n  bgImage?: string\n  status?: 'default' | 'active' | 'inactive'\n  size?: keyof typeof sizeMap\n  disabled?: boolean\n  className?: string\n} & Pick<ComponentPropsWithoutRef<'a'>, 'href' | 'target' | 'rel' | 'onClick'>\n\nconst TagItem = forwardRef<HTMLAnchorElement, TagItemProps>(\n  function TagItemInner(\n    {\n      label,\n      translatedLabel,\n      bgColor = '#7ACCB1',\n      bgImage,\n      size = 'M',\n      disabled,\n      status = 'default',\n      className,\n      ...props\n    },\n    _ref\n  ) {\n    const ref = useObjectRef(_ref)\n    const ariaButtonProps = useMemo<AriaButtonProps<'a'>>(\n      () => ({\n        elementType: 'a',\n        isDisabled: disabled,\n        ...props,\n      }),\n      [disabled, props]\n    )\n\n    const { buttonProps } = useButton(ariaButtonProps, ref)\n    const hasTranslatedLabel =\n      translatedLabel !== undefined && translatedLabel.length > 0\n\n    return (\n      <TagItemRoot\n        ref={ref}\n        size={hasTranslatedLabel ? 'M' : size}\n        status={status}\n        {...buttonProps}\n        className={className}\n      >\n        <Background bgColor={bgColor} bgImage={bgImage} status={status} />\n\n        <Inner>\n          <LabelWrapper isTranslate={hasTranslatedLabel}>\n            {hasTranslatedLabel && (\n              <TranslatedLabel>\n                <Label>{translatedLabel}</Label>\n              </TranslatedLabel>\n            )}\n            <Label>{label}</Label>\n          </LabelWrapper>\n          {status === 'active' && <Icon name=\"16/Remove\" />}\n        </Inner>\n      </TagItemRoot>\n    )\n  }\n)\n\nexport default memo(TagItem)\n\ntype TagItemRootProps = Pick<TagItemProps, 'status'> &\n  Required<Pick<TagItemProps, 'size'>>\n\ntype Horizontal = {\n  left: number\n  right: number\n}\nconst horizontalPadding = ({ left, right }: Horizontal) => css`\n  padding-right: ${px(right)};\n  padding-left: ${px(left)};\n`\nconst tagItemRootSize = (size: TagItemProps['size']) => {\n  switch (size) {\n    case 'M':\n      return horizontalPadding({ left: 24, right: 24 })\n    case 'S':\n      return horizontalPadding({ left: 16, right: 16 })\n  }\n}\nconst activeTagItemRoot = horizontalPadding({ left: 16, right: 8 })\n\nconst TagItemRoot = styled.a<TagItemRootProps>`\n  isolation: isolate;\n  position: relative;\n  height: ${({ size }) => sizeMap[size]}px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  text-decoration: none;\n  cursor: pointer;\n  overflow: hidden;\n  border-radius: 4px;\n  ${({ size, status }) => status !== 'active' && tagItemRootSize(size)}\n  ${({ status }) => status === 'active' && activeTagItemRoot}\n  color: ${({ status }) =>\n    status === 'inactive' ? 'var(--charcoal-text2)' : 'var(--charcoal-text5)'};\n\n  transition: 0.2s box-shadow;\n\n  &:not(:disabled):not([aria-disabled]),\n  &[aria-disabled='false'] {\n    ${focusVisibleFocusRingCss}\n  }\n\n  &:disabled,\n  &[aria-disabled]:not([aria-disabled='false']) {\n    opacity: 0.32;\n    cursor: default;\n  }\n`\n\nconst Background = styled.div<\n  Pick<TagItemProps, 'bgColor' | 'bgImage' | 'status'>\n>`\n  position: absolute;\n  z-index: 1;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n\n  background-color: ${({ bgColor }) => bgColor};\n  ${({ status }) =>\n    status === 'inactive' &&\n    css`\n      background-color: var(--charcoal-surface3);\n    `}\n\n  ${({ bgImage }) =>\n    bgImage !== undefined &&\n    css`\n      background-color: var(--charcoal-surface4);\n\n      &::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-position: center;\n        background-size: cover;\n        background-image: url(${bgImage});\n        mix-blend-mode: overlay;\n      }\n    `}\n`\n\nconst Inner = styled.div`\n  display: inline-flex;\n  gap: 8px;\n  align-items: center;\n  z-index: 2;\n`\n\nconst labelCSS = css`\n  font-size: 14px;\n  line-height: 22px;\n  font-weight: bold;\n  display: flow-root;\n\n  &::before {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-top: -4px;\n  }\n  &::after {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-bottom: -4px;\n  }\n`\nconst translateLabelCSS = css`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  font-size: 10px;\n`\nconst LabelWrapper = styled.div<{ isTranslate?: boolean }>`\n  ${({ isTranslate }) => (isTranslate ?? false ? translateLabelCSS : labelCSS)}\n`\n\nconst Label = styled.span`\n  max-width: 152px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  font-size: inherit;\n  color: inherit;\n  line-height: inherit;\n`\n\nconst TranslatedLabel = styled.div`\n  font-size: 12px;\n  line-height: 20px;\n  font-weight: bold;\n  display: flow-root;\n  &::before {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-top: -4px;\n  }\n  &::after {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-bottom: -4px;\n  }\n`\n"],"names":[],"sourceRoot":""}
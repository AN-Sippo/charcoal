{"version":3,"file":"react-src-components-DropdownSelector-index-story.23e6119f.iframe.bundle.js","mappings":";;;;AA0FA;;AAEA;;AAIA;;;AAGA;AAGA;;;;;;;;;;;AAWA;;;;AAIA;AAUA;;;AAGA;AAGA;AACA;AAGA;AACA;;;;;;;;;;;;AC7GA;;;;AAIA;AAGA;AACA;;;;ACEA;;;;;;;AAOA;;;;;;;;;AASA;;;;AC9BA;;;;AAMA;;;;;;AAQA;;;;;;;;;;;ACuBA;;AChBA;AAGA;AACA;AAGA;AACA;AAOA;;;;AAIA;AACA;;;AAGA;AACA","sources":["webpack://charcoal-ui/./packages/react/src/components/DropdownSelector/index.tsx","webpack://charcoal-ui/./packages/react/src/components/DropdownSelector/DropdownMenuItem.tsx","webpack://charcoal-ui/./packages/react/src/components/DropdownSelector/ListItem/index.tsx","webpack://charcoal-ui/./packages/react/src/components/DropdownSelector/MenuItemGroup/index.tsx","webpack://charcoal-ui/./packages/react/src/components/DropdownSelector/Popover/index.tsx","webpack://charcoal-ui/./packages/react/src/components/FieldLabel/index.tsx"],"sourcesContent":["import { ReactNode, useState, useRef } from 'react'\nimport styled from 'styled-components'\nimport { disabledSelector } from '@charcoal-ui/utils'\nimport Icon from '../Icon'\nimport FieldLabel from '../FieldLabel'\nimport { theme } from '../../styled'\nimport { DropdownPopover } from './DropdownPopover'\nimport { findPreviewRecursive } from './utils/findPreviewRecursive'\nimport MenuList, { MenuListChildren } from './MenuList'\n\nexport type DropdownSelectorProps = {\n  label: string\n  value: string\n  disabled?: boolean\n  placeholder?: string\n  showLabel?: boolean\n  invalid?: boolean\n  assistiveText?: string\n  required?: boolean\n  requiredText?: string\n  subLabel?: ReactNode\n  children: MenuListChildren\n  onChange: (value: string) => void\n}\n\nconst defaultRequiredText = '*必須'\n\nexport default function DropdownSelector(props: DropdownSelectorProps) {\n  const triggerRef = useRef<HTMLButtonElement>(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const preview = findPreviewRecursive(props.children, props.value)\n\n  return (\n    <DropdownSelectorRoot aria-disabled={props.disabled}>\n      {props.showLabel === true && (\n        <DropdownFieldLabel\n          label={props.label}\n          required={props.required}\n          requiredText={props.requiredText ?? defaultRequiredText}\n          subLabel={props.subLabel}\n        />\n      )}\n      <DropdownButton\n        invalid={props.invalid}\n        disabled={props.disabled}\n        onClick={() => {\n          if (props.disabled === true) return\n          setIsOpen(true)\n        }}\n        ref={triggerRef}\n        type=\"button\"\n      >\n        <DropdownButtonText>\n          {props.placeholder !== undefined && preview === undefined\n            ? props.placeholder\n            : preview}\n        </DropdownButtonText>\n        <DropdownButtonIcon name=\"16/Menu\" />\n      </DropdownButton>\n      {isOpen && (\n        <DropdownPopover\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n          triggerRef={triggerRef}\n          value={props.value}\n        >\n          <MenuList\n            value={props.value}\n            onChange={(v) => {\n              props.onChange(v)\n              setIsOpen(false)\n            }}\n          >\n            {props.children}\n          </MenuList>\n        </DropdownPopover>\n      )}\n      {props.assistiveText !== undefined && (\n        <AssertiveText invalid={props.invalid}>\n          {props.assistiveText}\n        </AssertiveText>\n      )}\n    </DropdownSelectorRoot>\n  )\n}\n\nconst DropdownSelectorRoot = styled.div`\n  display: inline-block;\n  width: 100%;\n\n  ${disabledSelector} {\n    cursor: default;\n    ${theme((o) => o.disabled)}\n  }\n`\n\nconst DropdownFieldLabel = styled(FieldLabel)`\n  width: 100%;\n\n  ${theme((o) => o.margin.bottom(8))}\n`\n\nconst DropdownButton = styled.button<{ invalid?: boolean }>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  height: 40px;\n  width: 100%;\n  box-sizing: border-box;\n  border: none;\n  cursor: pointer;\n\n  ${disabledSelector} {\n    cursor: default;\n  }\n\n  ${({ invalid }) =>\n    theme((o) => [\n      o.padding.horizontal(8),\n      o.outline.default.focus,\n      o.bg.surface3,\n      o.borderRadius(4),\n      invalid === true && o.outline.assertive,\n    ])}\n`\n\nconst DropdownButtonText = styled.span`\n  text-align: left;\n\n  ${theme((o) => [o.typography(14), o.font.text2])}\n`\n\nconst DropdownButtonIcon = styled(Icon)`\n  ${theme((o) => [o.font.text2])}\n`\n\nconst AssertiveText = styled.div<{ invalid?: boolean }>`\n  ${({ invalid }) =>\n    theme((o) => [\n      o.typography(14),\n      o.margin.top(8),\n      invalid === true ? o.font.assertive : o.font.text2,\n    ])}\n`\n","import styled from 'styled-components'\nimport MenuItem, { MenuItemProps } from './MenuItem'\nimport { MenuListContext } from './MenuList/MenuListContext'\nimport { useContext } from 'react'\nimport { theme } from '../../styled'\nimport Icon from '../Icon'\n\nexport type DropdownMenuItemProps = Omit<MenuItemProps<'div'>, 'as'>\n\n/**\n * DropdownSelectorの選択肢として使うMenuItem\n */\nexport default function DropdownMenuItem(props: DropdownMenuItemProps) {\n  const { value: ctxValue } = useContext(MenuListContext)\n  const isSelected = props.value === ctxValue\n  const { children, ...rest } = props\n\n  return (\n    <MenuItem {...rest}>\n      {isSelected && <Text2ColorIcon name=\"16/Check\" />}\n      <StyledSpan isSelected={isSelected}>{props.children}</StyledSpan>\n    </MenuItem>\n  )\n}\n\n/**\n * アイコンがない時を考慮して20px（16pxのwidthと4pxのgap）の余白をとる\n */\nconst StyledSpan = styled.span<{ isSelected?: boolean }>`\n  ${theme((o) => [o.typography(14), o.font.text2])};\n  display: flex;\n  align-items: center;\n  width: 100%;\n  margin-left: ${({ isSelected }) => (isSelected === true ? 0 : 20)}px;\n`\n\nconst Text2ColorIcon = styled(Icon)`\n  ${theme((o) => [o.font.text2])}\n  padding-right: 4px;\n`\n","import { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { theme } from '../../../styled'\n\nexport type CustomJSXElement =\n  | keyof JSX.IntrinsicElements\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  | React.JSXElementConstructor<any>\n\nexport type ListItemProps<T extends CustomJSXElement = 'div'> = {\n  children?: ReactNode\n  as?: T\n} & Omit<React.ComponentProps<T>, 'children'>\n\n/**\n * リストのある要素を示すコンポーネント\n *\n * asを用いて拡張することができる\n * @example\n * ```\n * <ListItem as=\"a\" href=\"#\">Link</ListItem>\n * <ListItem as={NextLink} href=\"#\">NextLink</ListItem>\n * ```\n */\nexport default function ListItem<T extends CustomJSXElement = 'div'>(\n  props: ListItemProps<T>\n) {\n  const { children, ...rest } = props\n  return (\n    <StyledLi role=\"option\">\n      <ItemDiv {...rest}>{props.children}</ItemDiv>\n    </StyledLi>\n  )\n}\n\nconst StyledLi = styled.li`\n  list-style: none;\n`\n\nconst ItemDiv = styled.div`\n  display: flex;\n  align-items: center;\n  min-height: 40px;\n  cursor: pointer;\n  outline: none;\n\n  ${theme((o) => [o.padding.horizontal(16), o.disabled])}\n\n  &[aria-disabled=\"true\"] {\n    cursor: default;\n  }\n\n  :hover,\n  :focus,\n  :focus-within {\n    ${theme((o) => [o.bg.surface3])}\n  }\n`\n","import styled from 'styled-components'\nimport MenuItem from '../MenuItem'\nimport { Divider } from '../Divider'\n\ntype MenuItemGroupChild = React.ReactElement<typeof MenuItem | typeof Divider>\n\nexport type MenuItemGroupProps = {\n  text: string\n  children: MenuItemGroupChild | MenuItemGroupChild[]\n}\n\n/**\n * 項目のリストを分類する見出しをつけるコンテナ要素\n */\nexport default function MenuItemGroup(props: MenuItemGroupProps) {\n  return (\n    <StyledLi role=\"presentation\">\n      <TextSpan>{props.text}</TextSpan>\n      <StyledUl role=\"group\">{props.children}</StyledUl>\n    </StyledLi>\n  )\n}\n\nconst TextSpan = styled.span`\n  display: block;\n  color: ${({ theme }) => theme.color.text3};\n  font-size: 12px;\n  font-weight: bold;\n  padding: 12px 0 8px 16px;\n`\n\nconst StyledUl = styled.ul`\n  padding-left: 0;\n  margin: 0;\n  box-sizing: border-box;\n  list-style: none;\n  overflow: hidden;\n`\n\nconst StyledLi = styled.li`\n  display: block;\n`\n","import { RefObject, useRef } from 'react'\nimport { ReactNode } from 'react'\nimport { DismissButton, Overlay, usePopover } from '@react-aria/overlays'\nimport styled from 'styled-components'\nimport { theme } from '../../../styled'\n\nexport type PopoverProps = {\n  isOpen: boolean\n  onClose: () => void\n  children: ReactNode\n  triggerRef: RefObject<Element>\n  popoverRef?: RefObject<HTMLDivElement>\n}\n\nconst _empty = () => null\n\n/**\n * 画面の全面に動的に開くことができるコンテナ要素\n * 外の要素をクリックしたり、内部からフォーカスを移動した場合に自動的に閉じる\n *\n * triggerRefの付近に画面内に収まるように表示される\n */\nexport default function Popover(props: PopoverProps) {\n  const defaultPopoverRef = useRef<HTMLDivElement>(null)\n  const finalPopoverRef =\n    props.popoverRef === undefined ? defaultPopoverRef : props.popoverRef\n  const { popoverProps, underlayProps } = usePopover(\n    {\n      triggerRef: props.triggerRef,\n      popoverRef: finalPopoverRef,\n      containerPadding: 16,\n    },\n    {\n      close: props.onClose,\n      isOpen: props.isOpen,\n      // never used\n      open: _empty,\n      setOpen: _empty,\n      toggle: _empty,\n    }\n  )\n\n  if (!props.isOpen) return null\n\n  return (\n    <Overlay portalContainer={document.body}>\n      <div {...underlayProps} style={{ position: 'fixed', inset: 0 }} />\n      <DropdownPopoverDiv {...popoverProps} ref={finalPopoverRef}>\n        <DismissButton onDismiss={() => props.onClose()} />\n        {props.children}\n        <DismissButton onDismiss={() => props.onClose()} />\n      </DropdownPopoverDiv>\n    </Overlay>\n  )\n}\n\nconst DropdownPopoverDiv = styled.div`\n  margin: 4px 0;\n  list-style: none;\n  overflow: auto;\n  max-height: inherit;\n\n  ${theme((o) => [\n    o.bg.background1,\n    o.border.default,\n    o.borderRadius(8),\n    o.padding.vertical(8),\n  ])}\n`\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { createTheme } from '@charcoal-ui/styled'\n\nexport interface FieldLabelProps\n  extends React.LabelHTMLAttributes<HTMLLabelElement> {\n  readonly className?: string\n  readonly label: string\n  readonly subLabel?: React.ReactNode\n  readonly required?: boolean\n  // TODO: 翻訳用のContextで注入する\n  readonly requiredText?: string\n}\n\nconst FieldLabel = React.forwardRef<HTMLLabelElement, FieldLabelProps>(\n  function FieldLabel(\n    {\n      style,\n      className,\n      label,\n      required = false,\n      requiredText,\n      subLabel,\n      ...labelProps\n    },\n    ref\n  ) {\n    return (\n      <FieldLabelWrapper style={style} className={className}>\n        <Label ref={ref} {...labelProps}>\n          {label}\n        </Label>\n        {required && <RequiredText>{requiredText}</RequiredText>}\n        <SubLabelClickable>\n          <span>{subLabel}</span>\n        </SubLabelClickable>\n      </FieldLabelWrapper>\n    )\n  }\n)\n\nexport default FieldLabel\n\nconst theme = createTheme(styled)\n\nconst Label = styled.label`\n  ${theme((o) => [o.typography(14).bold, o.font.text1])}\n`\n\nconst RequiredText = styled.span`\n  ${theme((o) => [o.typography(14), o.font.text2])}\n`\n\nconst SubLabelClickable = styled.div`\n  ${theme((o) => [\n    o.typography(14),\n    o.font.text3.hover.press,\n    o.outline.default.focus,\n  ])}\n`\n\nconst FieldLabelWrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n\n  > ${RequiredText} {\n    ${theme((o) => o.margin.left(4))}\n  }\n\n  > ${SubLabelClickable} {\n    ${theme((o) => o.margin.left('auto'))}\n  }\n`\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"react-src-components-Switch-index-story.0f8f772f.iframe.bundle.js","mappings":";;;;;;;;;;;;AA4EA;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;AAuBA","sources":["webpack://charcoal-ui/./packages/react/src/components/Switch/index.tsx"],"sourcesContent":["import { useSwitch } from '@react-aria/switch'\nimport type { AriaSwitchProps } from '@react-types/switch'\nimport { useMemo, memo, forwardRef } from 'react'\nimport * as React from 'react'\nimport { useToggleState } from 'react-stately'\nimport styled from 'styled-components'\nimport { useObjectRef } from '@react-aria/utils'\nimport { focusVisibleFocusRingCss } from '@charcoal-ui/styled'\n\nexport type SwitchProps = {\n  name: string\n  className?: string\n  value?: string\n  checked?: boolean\n  disabled?: boolean\n  onChange(checked: boolean): void\n} & (\n  | // children か label は片方が必須\n  {\n      children: React.ReactNode\n    }\n  | {\n      label: string\n    }\n)\n\nconst SwitchCheckbox = forwardRef<HTMLInputElement, SwitchProps>(\n  function SwitchCheckboxInner(props, external) {\n    const { disabled, className } = props\n\n    const ariaSwitchProps: AriaSwitchProps = useMemo(\n      () => ({\n        ...props,\n\n        // children がいない場合は aria-label をつけないといけない\n        'aria-label': 'children' in props ? undefined : props.label,\n        isDisabled: props.disabled,\n        isSelected: props.checked,\n      }),\n      [props]\n    )\n\n    const state = useToggleState(ariaSwitchProps)\n    const ref = useObjectRef<HTMLInputElement>(external)\n    const {\n      inputProps: { className: _className, type: _type, ...rest },\n    } = useSwitch(ariaSwitchProps, state, ref)\n\n    return (\n      <Label className={className} aria-disabled={disabled}>\n        <SwitchInput {...rest} ref={ref} />\n        {'children' in props ? (\n          // eslint-disable-next-line react/destructuring-assignment\n          <LabelInner>{props.children}</LabelInner>\n        ) : undefined}\n      </Label>\n    )\n  }\n)\n\nexport default memo(SwitchCheckbox)\n\nconst Label = styled.label`\n  display: inline-grid;\n  grid-template-columns: auto 1fr;\n  align-items: center;\n  cursor: pointer;\n  outline: 0;\n\n  &:disabled,\n  &[aria-disabled]:not([aria-disabled='false']) {\n    opacity: 0.32;\n    cursor: default;\n  }\n`\n\nconst LabelInner = styled.div`\n  font-size: 14px;\n  line-height: 22px;\n  color: var(--charcoal-text2);\n  margin-left: 4px;\n`\n\nconst SwitchInput = styled.input.attrs({ type: 'checkbox' })`\n  appearance: none;\n  display: inline-flex;\n  position: relative;\n  box-sizing: border-box;\n  width: 28px;\n  border: 2px solid transparent;\n\n  transition-property: background-color, box-shadow;\n  transition-duration: 0.2s;\n  cursor: inherit;\n\n  outline: none;\n  border-radius: 16px;\n  height: 16px;\n  margin: 0;\n  background-color: var(--charcoal-text4);\n  :hover {\n    background-color: var(--charcoal-text4-hover);\n  }\n  :active {\n    background-color: var(--charcoal-text4-press);\n  }\n  ${focusVisibleFocusRingCss}\n\n  &::after {\n    content: '';\n    position: absolute;\n    display: block;\n    top: 0;\n    left: 0;\n    width: 12px;\n    height: 12px;\n    transform: translateX(0);\n    transition: transform 0.2s;\n    border-radius: 1024px;\n    background-color: var(--charcoal-text5);\n    :hover {\n      background-color: var(--charcoal-text5-hover);\n    }\n    :active {\n      background-color: var(--charcoal-text5-press);\n    }\n  }\n\n  &:checked {\n    background-color: var(--charcoal-brand);\n    :hover {\n      background-color: var(--charcoal-brand-hover);\n    }\n    :active {\n      background-color: var(--charcoal-brand-press);\n    }\n    &::after {\n      transform: translateX(12px);\n      transition: transform 0.2s;\n    }\n  }\n`\n"],"names":[],"sourceRoot":""}
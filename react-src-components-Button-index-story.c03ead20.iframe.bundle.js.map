{"version":3,"file":"react-src-components-Button-index-story.c03ead20.iframe.bundle.js","mappings":";;;AAYA;;;AAaA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;;;;;AAKA;;AAEA;AAGA;AACA;AACA;;AAGA;AACA;;;AAGA;AACA;;;;;;;;;AASA;;;;AChBA","sources":["webpack://charcoal-ui/./packages/react/src/components/Button/StyledButton.tsx","webpack://charcoal-ui/./packages/react/src/components/Clickable/index.tsx"],"sourcesContent":["import styled, { css } from 'styled-components'\nimport Clickable from '../Clickable'\nimport { variantToFont } from './lib/variantToFont'\nimport { variantToBackground } from './lib/variantToBackground'\nimport type { Size } from '.'\nimport { focusVisibleFocusRingCss } from '@charcoal-ui/styled'\n\nconst horizontalPaddingSmall = css`\n  padding-right: 16px;\n  padding-left: 16px;\n`\n\nconst horizontalPaddingMedium = css`\n  padding-right: 24px;\n  padding-left: 24px;\n`\n\ntype StyledButtonProps = {\n  $fullWidth: boolean\n  $size: Size\n  $background: ReturnType<typeof variantToBackground>\n  $color: ReturnType<typeof variantToFont>\n  $isActive: boolean\n}\n\nexport const StyledButton = styled(Clickable)<StyledButtonProps>`\n  width: ${(p) => (p.$fullWidth ? 'stretch' : 'min-content')};\n  display: inline-grid;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  user-select: none;\n  white-space: nowrap;\n  border-radius: 999999px;\n  font-size: 14px;\n  line-height: 22px;\n  font-weight: bold;\n\n  ${(p) => (p.$size === 'M' ? horizontalPaddingMedium : horizontalPaddingSmall)}\n  color: var(--charcoal-${(p) => p.$color});\n  background-color: var(--charcoal-${(p) => p.$background});\n  transition: 0.2s color, 0.2s background-color, 0.2s box-shadow;\n\n  &:not(:disabled):not([aria-disabled]),\n  &[aria-disabled='false'] {\n    ${focusVisibleFocusRingCss}\n\n    ${({ $isActive: $active, $color, $background }) =>\n      $active\n        ? css`\n            color: var(--charcoal-${$color}-press);\n            background-color: var(--charcoal-${$background}-press);\n          `\n        : css`\n            &:hover {\n              color: var(--charcoal-${$color}-hover);\n              background-color: var(--charcoal-${$background}-hover);\n            }\n            &:active {\n              color: var(--charcoal-${$color}-press);\n              background-color: var(--charcoal-${$background}-press);\n            }\n          `}\n  }\n\n  &:disabled,\n  &[aria-disabled]:not([aria-disabled='false']) {\n    opacity: 0.32;\n  }\n  height: ${(p) => (p.$size === 'M' ? 40 : 32)}px;\n`\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport {\n  LinkProps,\n  useComponentAbstraction,\n} from '../../core/ComponentAbstraction'\nimport { disabledSelector } from '@charcoal-ui/utils'\n\ninterface BaseProps {\n  /**\n   * クリックの無効化\n   */\n  disabled?: boolean\n}\n\ninterface LinkBaseProps {\n  /**\n   * リンクのURL。指定するとbuttonタグではなくaタグとして描画される\n   */\n  to: string\n}\n\nexport type ClickableProps =\n  | (BaseProps & Omit<React.ComponentPropsWithoutRef<'button'>, 'disabled'>)\n  | (BaseProps & LinkBaseProps & Omit<LinkProps, 'to'>)\nexport type ClickableElement = HTMLButtonElement & HTMLAnchorElement\n\nconst Clickable = React.forwardRef<ClickableElement, ClickableProps>(\n  function Clickable(props, ref) {\n    const { Link } = useComponentAbstraction()\n    const isLink = 'to' in props\n    const as = isLink ? Link : 'button'\n    const ariaDisabled = isLink && props.disabled === true ? true : undefined\n    let rest = props\n    if (isLink) {\n      const { disabled, ..._rest } = props\n      rest = _rest\n    }\n    return (\n      <StyledClickableDiv\n        {...rest}\n        ref={ref}\n        as={as}\n        aria-disabled={ariaDisabled}\n      />\n    )\n  }\n)\nexport default Clickable\n\nconst StyledClickableDiv = styled.div`\n  cursor: pointer;\n\n  ${disabledSelector} {\n    cursor: default;\n  }\n\n  /* Reset button appearance */\n  appearance: none;\n  background: transparent;\n  padding: 0;\n  border-style: none;\n  outline: none;\n  color: inherit;\n  text-rendering: inherit;\n  letter-spacing: inherit;\n  word-spacing: inherit;\n  text-decoration: none;\n\n  &:focus {\n    outline: none;\n  }\n\n  /* Change the font styles in all browsers. */\n  font: inherit;\n\n  /* Remove the margin in Firefox and Safari. */\n  margin: 0;\n\n  /* Show the overflow in Edge. */\n  overflow: visible;\n\n  /* Remove the inheritance of text transform in Firefox. */\n  text-transform: none;\n\n  /* Remove the inner border and padding in Firefox. */\n  &::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n`\n"],"names":[],"sourceRoot":""}